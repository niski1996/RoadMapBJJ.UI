@page "/register"

<EditForm Model="@user" OnValidSubmit="@RegisterUser">
    <RadzenStack class="form-group">
        <RadzenLabel Text="Username" />
        <RadzenTextBox @bind-Value="@user.Username" Name="Username" Placeholder="Enter username" Style="width: 100%;" />
        <RadzenRequiredValidator Component="Username" Text="Username is required." />
    </RadzenStack>

    <RadzenStack class="form-group">
        <RadzenLabel Text="Email" />
        <RadzenTextBox @bind-Value="@user.Email" Name="Email" Placeholder="Enter email" Style="width: 100%;" />
        <RadzenRequiredValidator Component="Email" Text="Email is required." />
        <RadzenEmailValidator Component="Email" Text="Provide a valid email address" />
    </RadzenStack>

    <RadzenStack class="form-group">
        <RadzenLabel Text="Password" />
        <RadzenPassword @bind-Value="@user.Password" Name="Password" Placeholder="Enter password" Style="width: 100%;" />
        <RadzenRequiredValidator Component="Password" Text="Password is required." />
    </RadzenStack>

    <RadzenStack class="form-group">
        <RadzenLabel Text="Confirm Password" />
        <RadzenPassword @bind-Value="@confirmPassword" Name="ConfirmPassword" Placeholder="Confirm password" Style="width: 100%;" />
        <RadzenCompareValidator Component="ConfirmPassword" ValueToCompare="@user.Password" Text="Passwords must match." />
    </RadzenStack>

    <RadzenButton Text="Register" Click="@RegisterUser" Style="margin-top: 20px;" />
</EditForm>

@code {
private User user = new User();
private string confirmPassword;

private async Task RegisterUser()
{
// Check if passwords match
if (user.Password != confirmPassword)
{
// Handle error: Passwords do not match
return;
}

// TODO: Implement user registration logic
// Send data to the server or save it to the database
}

public class User
{
public string Username { get; set; }
public string Email { get; set; }
public string Password { get; set; }
}
}
